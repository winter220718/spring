07_컨트롤러.txt

 # MVC 패턴
 
  - 프로그램을 효율적으로 만들기 위해서 각 관심사를 분리하여 개발을 진행하는 디자인 패턴
  - 프로그램의 비즈니스 로직(Service)와 화면(View)을 구분하는데에 초점을 맞춘 디자인 패턴
  - Model, View, Controller 패턴
  - Model : 데이터를 보관하는 용도로 사용하는 클래스 (데이터의 형태)
  - View : 화면 (JSP, HTML, CSS, Javascript ...) (jsp를 안쓰면 Bootstrap, react, vue. js, ..)
  - Controller : 요청을 받으면 어떤 서비스를 거쳐 어떤 뷰로 가야하는지를 매핑해준다eventListener
  
  
 # Spring Controller
 
  - MVC 패턴 중 Controller에 해당하는 부분이다
  - @Controller는 컴포넌트이기 때문에 Spring Context에 의해 수집되고 자동으로 관리된다
  - 요청 uri와 method를 통해 어떤 서비스를 거쳐 어떤 뷰로 가야하는지를 정희하는 곳이다
  
	  @Controller
	 
	  - 해당 클래스를 컨트롤러라고 명시하는 어노테이션
	  - Spring Context의 스캔의 대상이 된다
	  
	  @RequestMapping(value="uri", method="")
	 
	  - 어떤 method의 어떤 uri로 접속했을 때 처리할지 설정하는 어노테이션
	  - 클래스 위에 쓸 수도 있고 메서드 위에 쓸 수도 있다
	  
	  @GetMapping(value={""})
	  
	   - @Requestmapping(value="uri", method=RequestMethod.GET)을 생략한 어노테이션
	   
	  @PostMapping(value={""})
	  
	   - @RequestMapping(Value="uri", method=RequestMethod.POST)을 생략한 어노테이션
	  
  # 컨트롤러에서 사용할 수 있는 인자값
  
   1. HttpServletRequest
    
    - 컨트롤러의 파라미터에 HttpServletRequest를 만들어 놓으면 Spring이 알아서 JSP의 request 객체를 그곳에 전달해준다
    
   2. HttpServletResponse
    
    - JSP의 response 객체를 알아서 전달해준다
    
   3. 자바빈 형태의 모델 객체
   
    - 파라미터의 이름과 모델 객체의 필드명이 동일하다면 값을 자동으로 바인딩해준다
      (input tag의 name속성값과 model의 필드명이 같아야 한다)
      
     - 심지어 데이터 타입도 알맞게 변환해준다. (파라미터는 원래 String 타입이지만 필드값이 정수라면 바로 Integer가 됨)
     
     - 만약 바인딩이 성공했다면 자동으로 어트리뷰트에도 추가해준다
     	(추가할 때의 이름은 클래스 이름의 소문자 버전)
   
   4. 전달 받는 파라미터와 같은 이름의 매개 변수
   
    - 파라미터와 같은 이름의 매개변수를 설정해두면 값이 알아서 들어온다
    
    - 타입도 알아서 변한다
    
    - @ModelAttribute("paramName") 어노테이션을 사용하는 경우 어트리뷰트에 자동으로 추가된다
    
  # 컨트롤러의 리턴 타입
  
   1. 다음 view를 찾는 타입
   
    - String : 리턴하는 문자열의 앞에 /WEB-INF/views/를 더하고
   
    - void : 컨트롤러로 접속할 때 사용한 URI를 그대로 VIEW를 찾는데에 사용한다
   
   2. view를 찾지 않는 리턴 타입
    
     - 자바빈 객체 타입을 리턴 : 데이터를 바로 응답한다 (.json, .xml)
     
     - ResponseEntity : 개발자가 직접 원하는 응답을 생성하여 응답하는 방식
     					(주로 원하는 HTTP에러 코드를 클라이언트에게 응답할 때 사용)
     					
     					
   
   
   3. 
   
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
   
   
  